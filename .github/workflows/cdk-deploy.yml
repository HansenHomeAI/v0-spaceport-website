name: CDK Deploy

on:
  push:
    branches: [ main, development, ml-development, email-notifications, 'agent-*' ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || (startsWith(github.ref_name, 'agent-') && 'agent-testing' || 'staging') }}
    permissions:
      id-token: write   # for GitHub OIDC
      contents: read
    defaults:
      run:
        working-directory: infrastructure/spaceport_cdk

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install specific versions to avoid dependency resolution issues
        pip install aws-cdk-lib==2.89.0 constructs==10.3.0 boto3==1.28.0 --no-deps
        pip install pytest jsii cattrs typeguard typing-extensions publication --no-deps
        # Now install all dependencies
        pip install -e .
        # Pin CDK CLI to match aws-cdk-lib to avoid qualifier context mismatches
        npm install -g aws-cdk@2.89.0
        # Build Next.js site for Cloudflare (placeholder; wired in follow-up steps)
        cd ../../web && npm ci || npm install && npm run build || true
        cd -

    - name: Configure AWS credentials (production via OIDC)
      if: github.ref_name == 'main'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2

    - name: Configure AWS credentials (agent branches via staging keys)  
      if: startsWith(github.ref_name, 'agent-')
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Configure AWS credentials (staging via access keys)
      if: github.ref_name != 'main' && !startsWith(github.ref_name, 'agent-')
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: CDK Bootstrap (if needed)
      if: github.event_name == 'push'
      run: |
        set -e
        ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        
        # Check if CDK is bootstrapped with default qualifier
        if ! aws ssm get-parameter --name "/cdk-bootstrap/hnb659fds/version" --region us-west-2 2>/dev/null; then
          echo "CDK not bootstrapped with default qualifier. Bootstrapping for account $ACCOUNT..."
          
          # Clean up any existing non-standard bootstrap first
          echo "Checking for existing CDK bootstrap stack..."
          if aws cloudformation describe-stacks --stack-name CDKToolkit --region us-west-2 2>/dev/null; then
            echo "Found existing CDKToolkit stack. Deleting to ensure clean bootstrap with default qualifier..."
            aws cloudformation delete-stack --stack-name CDKToolkit --region us-west-2
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name CDKToolkit --region us-west-2
            echo "Existing CDK bootstrap stack deleted successfully"
          fi
          
          # Bootstrap with default qualifier for consistency between dev and prod
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "Production bootstrap with OIDC role trust and default qualifier"
            cdk bootstrap aws://$ACCOUNT/us-west-2 \
              --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \
              --trust arn:aws:iam::$ACCOUNT:role/GithubActionsProdRole
          else
            echo "Development bootstrap with default qualifier"
            cdk bootstrap aws://$ACCOUNT/us-west-2
          fi
        else
          echo "CDK already bootstrapped with default qualifier for account $ACCOUNT"
        fi

    - name: Verify Bootstrap
      if: github.event_name == 'push'
      run: |
        set -e
        ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        echo "Verifying CDK bootstrap for account $ACCOUNT"

        # Simple verification - check for default qualifier SSM parameter
        echo "Checking for default qualifier bootstrap parameter..."
        if aws ssm get-parameter --name "/cdk-bootstrap/hnb659fds/version" --region us-west-2 >/dev/null 2>&1; then
          echo "‚úÖ CDK bootstrap verified successfully with default qualifier"
        else
          echo "‚ùå CDK bootstrap verification failed - default qualifier not found"
          echo "This should not happen after the bootstrap step above"
          exit 1
        fi

    # Removed dangerous cleanup script - production stacks should not be deleted automatically

    - name: Deploy CDK Stacks
      if: github.event_name == 'push'
      env:
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        # Stripe secrets for staging environment (CDK expects _TEST suffix for staging)
        STRIPE_SECRET_KEY_TEST: ${{ secrets.STRIPE_SECRET_KEY_STAGING }}
        STRIPE_WEBHOOK_SECRET_STAGING: ${{ secrets.STRIPE_WEBHOOK_SECRET_STAGING }}
        STRIPE_PRICE_SINGLE_STAGING: ${{ secrets.STRIPE_PRICE_SINGLE_STAGING }}
        STRIPE_PRICE_STARTER_STAGING: ${{ secrets.STRIPE_PRICE_STARTER_STAGING }}
        STRIPE_PRICE_GROWTH_STAGING: ${{ secrets.STRIPE_PRICE_GROWTH_STAGING }}
        # Stripe secrets for production environment
        STRIPE_SECRET_KEY_PROD: ${{ secrets.STRIPE_SECRET_KEY_PROD }}
        STRIPE_WEBHOOK_SECRET_PROD: ${{ secrets.STRIPE_WEBHOOK_SECRET_PROD }}
        STRIPE_PRICE_SINGLE_PROD: ${{ secrets.STRIPE_PRICE_SINGLE_PROD }}
        STRIPE_PRICE_STARTER_PROD: ${{ secrets.STRIPE_PRICE_STARTER_PROD }}
        STRIPE_PRICE_GROWTH_PROD: ${{ secrets.STRIPE_PRICE_GROWTH_PROD }}
        # Referral system configuration - using CDK defaults (Option A)
        # REFERRAL_KICKBACK_PERCENTAGE: 10 (default)
        # EMPLOYEE_KICKBACK_PERCENTAGE: 30 (default) 
        # COMPANY_KICKBACK_PERCENTAGE: 70 (default)
        # REFERRAL_DURATION_MONTHS: 6 (default)
        # EMPLOYEE_USER_ID: "" (optional)
        # FRONTEND_URL: "https://spcprt.com" (default)
      run: |
        set -e
        ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        
        # Determine environment based on branch
        if [ "${GITHUB_REF_NAME}" = "main" ]; then
          ENVIRONMENT="production"
          echo "Deploying to production environment"
        elif [[ "${GITHUB_REF_NAME}" == agent-* ]]; then
          ENVIRONMENT="staging"
          AGENT_ID="${GITHUB_REF_NAME}"
          echo "ü§ñ Deploying agent environment: $AGENT_ID"
          echo "üìç Using staging AWS account with agent-specific resources"
        else
          ENVIRONMENT="staging"
          echo "Deploying to staging environment"
        fi
        
        # Deploy all stacks with environment context
        if [[ "${GITHUB_REF_NAME}" == agent-* ]]; then
          # Agent-specific deployment with dynamic context
          cdk deploy --all \
            --require-approval never \
            --no-fail-on-empty-changeset \
            --context environment=$ENVIRONMENT \
            --context agent-id="$AGENT_ID" \
            --context account=$ACCOUNT \
            --context region=us-west-2 \
            --parameters Spaceport${ENVIRONMENT^}Stack:GoogleMapsApiKey=${{ secrets.GOOGLE_MAPS_API_KEY }}
        else
          # Standard deployment
          cdk deploy --all \
            --require-approval never \
            --no-fail-on-empty-changeset \
            --context environment=$ENVIRONMENT \
            --context account=$ACCOUNT \
            --context region=us-west-2 \
            --parameters Spaceport${ENVIRONMENT^}Stack:GoogleMapsApiKey=${{ secrets.GOOGLE_MAPS_API_KEY }}
        fi

    - name: Update Frontend Environment Variables
      if: github.event_name == 'push'
      run: |
        set -e
        ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        
        # Determine environment based on branch
        if [ "${GITHUB_REF_NAME}" = "main" ]; then
          ENVIRONMENT="production"
          SECRET_SUFFIX="PROD"
        else
          ENVIRONMENT="staging"
          SECRET_SUFFIX="PREVIEW"
        fi
        
        # Get CDK stack outputs
        STACK_NAME="Spaceport${ENVIRONMENT^}Stack"
        DRONE_PATH_API_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='DronePathApiUrl'].OutputValue" --output text)
        FILE_UPLOAD_API_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='FileUploadApiUrl'].OutputValue" --output text)
        
        # Get Auth stack outputs
        AUTH_STACK_NAME="SpaceportAuth${ENVIRONMENT^}Stack"
        PROJECTS_API_URL=$(aws cloudformation describe-stacks --stack-name $AUTH_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ProjectsApiUrl'].OutputValue" --output text)
        
        # Get ML Pipeline stack outputs
        ML_STACK_NAME="SpaceportMLPipeline${ENVIRONMENT^}Stack"
        ML_PIPELINE_API_URL=$(aws cloudformation describe-stacks --stack-name $ML_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='MLPipelineApiUrl'].OutputValue" --output text)
        
        echo "Retrieved API URLs:"
        echo "Drone Path API: $DRONE_PATH_API_URL"
        echo "File Upload API: $FILE_UPLOAD_API_URL"
        echo "Projects API: $PROJECTS_API_URL"
        echo "ML Pipeline API: $ML_PIPELINE_API_URL"
        
        # Note: In a real deployment, you would update GitHub secrets here
        # This requires a GitHub token with appropriate permissions
        # For now, we'll just output the values for manual update

    - name: CDK Diff
      if: github.event_name == 'pull_request'
      run: npx cdk diff 