name: CDK Deploy

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
    permissions:
      id-token: write   # for GitHub OIDC
      contents: read
    defaults:
      run:
        working-directory: infrastructure/spaceport_cdk

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install specific versions to avoid dependency resolution issues
        pip install aws-cdk-lib==2.89.0 constructs==10.3.0 boto3==1.28.0 --no-deps
        pip install pytest jsii cattrs typeguard typing-extensions publication --no-deps
        # Now install all dependencies
        pip install -e .
        npm install -g aws-cdk
        # Build Next.js site for Cloudflare (placeholder; wired in follow-up steps)
        cd ../../web && npm ci || npm install && npm run build || true
        cd -

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2

    - name: CDK Bootstrap
      if: github.event_name == 'push'
      env:
        CDK_NEW_BOOTSTRAP: "1"
        CDK_QUALIFIER: "spcdkprod1"
      run: |
        set -e
        ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        echo "Clearing existing bootstrap state and re-bootstrapping CDK in account $ACCOUNT..."
        
        # Clear any existing bootstrap state
        aws cloudformation delete-stack --stack-name CDKToolkit --region us-west-2 2>/dev/null || true
        echo "Waiting for CDKToolkit stack deletion to complete..."
        aws cloudformation wait stack-delete-complete --stack-name CDKToolkit --region us-west-2 2>/dev/null || true
        
        # Clear SSM parameters related to CDK bootstrap
        echo "Clearing CDK bootstrap SSM parameters..."
        aws ssm delete-parameter --name "/cdk-bootstrap/hnb659fds/version" --region us-west-2 2>/dev/null || true
        aws ssm delete-parameter --name "/cdk-bootstrap/spcdk001/version" --region us-west-2 2>/dev/null || true
        aws ssm delete-parameter --name "/cdk-bootstrap/$CDK_QUALIFIER/version" --region us-west-2 2>/dev/null || true
        
        # Clear ALL CDK assets S3 buckets (more robust cleanup)
        echo "Clearing all CDK assets buckets..."
        for bucket in $(aws s3 ls | grep "cdk-.*assets.*$ACCOUNT.*us-west-2" | awk '{print $3}'); do
          echo "Clearing bucket: $bucket"
          aws s3 rm s3://$bucket --recursive 2>/dev/null || true
          aws s3 rb s3://$bucket --force 2>/dev/null || true
        done
        
        # Also check for any other CDK-related buckets
        for bucket in $(aws s3 ls | grep "cdk-.*$ACCOUNT.*us-west-2" | awk '{print $3}'); do
          echo "Clearing CDK bucket: $bucket"
          aws s3 rm s3://$bucket --recursive 2>/dev/null || true
          aws s3 rb s3://$bucket --force 2>/dev/null || true
        done
        
        # Final cleanup check - wait a moment and check again
        echo "Waiting for cleanup to settle..."
        sleep 10
        
        # One more cleanup pass to catch any buckets created during cleanup
        for bucket in $(aws s3 ls | grep "cdk-.*$ACCOUNT.*us-west-2" | awk '{print $3}'); do
          echo "Final cleanup of CDK bucket: $bucket"
          aws s3 rm s3://$bucket --recursive 2>/dev/null || true
          aws s3 rb s3://$bucket --force 2>/dev/null || true
        done
        
        # Force complete re-bootstrap with fixed qualifier to avoid global bucket name conflicts
        npx cdk bootstrap aws://$ACCOUNT/us-west-2 \
          --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \
          --qualifier $CDK_QUALIFIER \
          --new-bootstrap \
          --force

    - name: Deploy CDK Stack
      if: github.event_name == 'push'
      env:
        CDK_QUALIFIER: "spcdkprod1"
      run: |
        # Deploy SpaceportStack with GoogleMapsApiKey parameter
        npx cdk deploy SpaceportStack --require-approval never --context account=$(aws sts get-caller-identity --query Account --output text) --context region=us-west-2 --parameters GoogleMapsApiKey=${{ secrets.GOOGLE_MAPS_API_KEY }} --toolkit-stack-name CDKToolkit-$CDK_QUALIFIER
        # Deploy SpaceportMLPipelineStack without parameters
        npx cdk deploy SpaceportMLPipelineStack --require-approval never --context account=$(aws sts get-caller-identity --query Account --output text) --context region=us-west-2 --toolkit-stack-name CDKToolkit-$CDK_QUALIFIER
        # Deploy new dedicated Auth stack (v2)
        npx cdk deploy SpaceportAuthStack --require-approval never --context account=$(aws sts get-caller-identity --query Account --output text) --context region=us-west-2 --toolkit-stack-name CDKToolkit-$CDK_QUALIFIER

    - name: CDK Diff
      if: github.event_name == 'pull_request'
      run: npx cdk diff 