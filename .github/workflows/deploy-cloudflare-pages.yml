name: Deploy Next.js to Cloudflare Pages (main & development)

on:
  workflow_dispatch:
  push:
    branches: [ main, development ]
    paths:
      - 'web/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: web
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'

      - name: Install deps
        run: npm ci || npm install

      - name: Build Next for Cloudflare (dynamic)
        run: |
          npm run build
          npm run cf:build
      
      - name: Set Pages runtime flags (API)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_PAGES_PROJECT: ${{ secrets.CF_PAGES_PROJECT }}
        run: |
          if [[ -n "$CLOUDFLARE_API_TOKEN" && -n "$CLOUDFLARE_ACCOUNT_ID" && -n "$CF_PAGES_PROJECT" ]]; then
            curl -fsS -X PATCH \
              -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
              -H "Content-Type: application/json" \
              "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${CF_PAGES_PROJECT}" \
              --data '{
                "deployment_configs": {
                  "production": {
                    "compatibility_date": "2025-08-09",
                    "compatibility_flags": ["nodejs_compat", "nodejs_compat_populate_process_env"]
                  },
                  "preview": {
                    "compatibility_date": "2025-08-09",
                    "compatibility_flags": ["nodejs_compat", "nodejs_compat_populate_process_env"]
                  }
                }
              }' | cat
          fi

      - name: Debug .vercel/output contents
        run: |
          echo "Listing .vercel/output" && ls -la .vercel/output || true
          echo "Functions manifest.json:" && cat .vercel/output/functions/manifest.json || true
          echo "Functions dir:" && ls -la .vercel/output/functions || true
          echo "Static dir:" && ls -la .vercel/output/static || true
          echo "Worker present?" && (ls -la .vercel/output/static/_worker.js || echo "_worker.js missing")

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Deploy to Cloudflare Pages (per-branch)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_PAGES_PROJECT: ${{ secrets.CF_PAGES_PROJECT }}
        run: |
          BRANCH="${{ github.ref_name }}"
          PROJECT_NAME="$CF_PAGES_PROJECT"
          if [ "$BRANCH" = "main" ]; then
            PROJECT_NAME="v0-spaceport-website-prod-fresh"
            BRANCH_ALIAS="main"
          else
            if [ -n "${{ secrets.CF_PAGES_PROJECT_DEV_OVERRIDE }}" ]; then
              PROJECT_NAME="${{ secrets.CF_PAGES_PROJECT_DEV_OVERRIDE }}"
              BRANCH_ALIAS=dev-live
            else
              BRANCH_ALIAS="$BRANCH"
            fi
          fi
          echo "Deploying to project: $PROJECT_NAME (branch alias: $BRANCH_ALIAS)"
          npx wrangler pages deploy .vercel/output \
            --project-name "$PROJECT_NAME" \
            --branch "$BRANCH_ALIAS"

      - name: Verify endpoints
        run: |
          HOST="https://v0-spaceport-website-prod-fresh.pages.dev"
          echo "Verifying $HOST"
          for path in "/" "/landing" "/about" "/pricing" "/create" "/signup" "/api/health"; do
            echo "GET $HOST$path";
            curl -fsS "$HOST$path" -H 'Accept: text/html,application/json' >/dev/null || (echo "Failed: $path" && curl -i "$HOST$path" && exit 1);
          done
