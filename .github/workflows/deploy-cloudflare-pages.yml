name: Deploy Next.js to Cloudflare Pages

on:
  workflow_dispatch:
  push:
    branches: [ main, development, 'agent-*' ]
    paths:
      - 'web/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: web
    steps:
      - uses: actions/checkout@v4
      - name: Select target Pages project per branch
        id: select_project
        run: |
          BRANCH="${{ github.ref_name }}"
          if [ "$BRANCH" = "main" ]; then
            TARGET="v0-spaceport-website-prod-fresh"
          else
            TARGET="v0-spaceport-website-preview2"
          fi
          echo "CF_PAGES_PROJECT=$TARGET" >> $GITHUB_ENV
          echo "project=$TARGET" >> $GITHUB_OUTPUT
          echo "Using CF Pages project: $TARGET for branch $BRANCH"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'

      - name: Install deps (tolerant to peer conflicts in CI)
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Inject build-time env (.env) for NEXT_PUBLIC_* per branch
        run: |
          set -euo pipefail
          BRANCH="${{ github.ref_name }}"
          echo "Preparing .env for branch $BRANCH"
          : > .env
          if [ "$BRANCH" = "main" ]; then
            echo "NEXT_PUBLIC_PROJECTS_API_URL=${{ secrets.PROJECTS_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_DRONE_PATH_API_URL=${{ secrets.DRONE_PATH_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_FILE_UPLOAD_API_URL=${{ secrets.FILE_UPLOAD_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_WAITLIST_API_URL=${{ secrets.WAITLIST_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_ML_PIPELINE_API_URL=${{ secrets.ML_PIPELINE_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_BETA_ACCESS_API_URL=${{ secrets.BETA_ACCESS_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_FEEDBACK_API_URL=${{ secrets.FEEDBACK_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_COGNITO_REGION=${{ secrets.COGNITO_REGION_PROD }}" >> .env
            echo "NEXT_PUBLIC_COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID_PROD }}" >> .env
            echo "NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID=${{ secrets.COGNITO_USER_POOL_CLIENT_ID_PROD }}" >> .env
            echo "NEXT_PUBLIC_SUBSCRIPTION_API_URL=${{ secrets.SUBSCRIPTION_API_URL_PROD }}" >> .env
            echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_PROD }}" >> .env
            # Analytics environment variables
            echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env
            echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> .env
            echo "NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}" >> .env
          else
            echo "NEXT_PUBLIC_PROJECTS_API_URL=${{ secrets.PROJECTS_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_DRONE_PATH_API_URL=${{ secrets.DRONE_PATH_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_FILE_UPLOAD_API_URL=${{ secrets.FILE_UPLOAD_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_WAITLIST_API_URL=${{ secrets.WAITLIST_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_ML_PIPELINE_API_URL=${{ secrets.ML_PIPELINE_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_BETA_ACCESS_API_URL=${{ secrets.BETA_ACCESS_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_FEEDBACK_API_URL=${{ secrets.FEEDBACK_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_COGNITO_REGION=${{ secrets.COGNITO_REGION_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID=${{ secrets.COGNITO_USER_POOL_CLIENT_ID_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_SUBSCRIPTION_API_URL=${{ secrets.SUBSCRIPTION_API_URL_PREVIEW }}" >> .env
            echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY_STAGING }}" >> .env
            # Analytics environment variables
            echo "NEXT_PUBLIC_SENTRY_DSN=${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}" >> .env
            echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> .env
            echo "NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}" >> .env
          fi
          echo "Wrote $(wc -l < .env) vars to .env"

      - name: Build Next for Cloudflare (SSR)
        run: |
          npm run build
          npx @cloudflare/next-on-pages

      - name: Debug .vercel/output contents
        run: |
          echo "Listing .vercel/output" && ls -la .vercel/output || true
          echo "Functions manifest.json:" && (cat .vercel/output/functions/manifest.json || true)
          echo "Static dir:" && ls -la .vercel/output/static || true

      - name: Upload .vercel/output for diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: vercel-output-${{ github.sha }}
          path: .vercel/output
          if-no-files-found: ignore
          retention-days: 3

      - name: Install Wrangler
        run: npm i -g wrangler@4

      - name: Ensure Pages runtime flags (compat date + node compat)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          FEEDBACK_API_URL_PREVIEW: ${{ secrets.FEEDBACK_API_URL_PREVIEW }}
          FEEDBACK_API_URL_PROD: ${{ secrets.FEEDBACK_API_URL_PROD }}
        run: |
          jq -n \
            --arg prod "$FEEDBACK_API_URL_PROD" \
            --arg preview "$FEEDBACK_API_URL_PREVIEW" \
            '{
              deployment_configs: {
                production: {
                  compatibility_date: "2025-08-09",
                  compatibility_flags: ["nodejs_compat", "nodejs_compat_populate_process_env"],
                  build_image_major_version: 3,
                  environment_variables: {
                    NEXT_PUBLIC_FEEDBACK_API_URL: { value: $prod }
                  }
                },
                preview: {
                  compatibility_date: "2025-08-09",
                  compatibility_flags: ["nodejs_compat", "nodejs_compat_populate_process_env"],
                  build_image_major_version: 3,
                  environment_variables: {
                    NEXT_PUBLIC_FEEDBACK_API_URL: { value: $preview }
                  }
                }
              }
            }' > payload.json
          curl -fsS -X PATCH \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${CF_PAGES_PROJECT}" \
            --data @payload.json | cat

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          BRANCH="${{ github.ref_name }}"
          # Deploy the static subdir so _worker.js sits at the upload root
          npx wrangler pages deploy .vercel/output/static \
            --project-name "$CF_PAGES_PROJECT" \
            --branch "$BRANCH"

      - name: Resolve latest deployment URLs (preview alias + hash URL)
        id: resolve_urls
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH="${{ github.ref_name }}"
          # Get most recent deployment for the selected project (includes preview)
          JSON=$(curl -fsSL -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${CF_PAGES_PROJECT}/deployments?per_page=1")
          HASH_URL=$(echo "$JSON" | jq -r '.result[0].url')
          DEPLOY_ID=$(echo "$JSON" | jq -r '.result[0].id')
          # Fetch aliases for that deployment (branch alias if any)
          DETAIL=$(curl -fsSL -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${CF_PAGES_PROJECT}/deployments/${DEPLOY_ID}")
          ALIAS=$(echo "$DETAIL" | jq -r '.result.aliases[0] // empty')
          echo "hash_url=$HASH_URL" >> $GITHUB_OUTPUT
          echo "alias_url=$ALIAS" >> $GITHUB_OUTPUT
          echo "Resolved: HASH=$HASH_URL ALIAS=${ALIAS:-<none>}"

      - name: Verify preview alias and hash URL with retries
        env:
          HASH_URL: ${{ steps.resolve_urls.outputs.hash_url }}
          ALIAS_URL: ${{ steps.resolve_urls.outputs.alias_url }}
        run: |
          set -e
          urls=""
          if [ -n "$ALIAS_URL" ]; then urls="$urls $ALIAS_URL"; fi
          if [ -n "$HASH_URL" ]; then urls="$urls $HASH_URL"; fi
          echo "Checking URLs: $urls"
          for URL in $urls; do
            echo "Probing $URL ..."
            for i in $(seq 1 12); do
              echo "Attempt $i"
              if curl -fsS "$URL/health.txt" >/dev/null; then echo "OK $URL/health.txt"; break; fi
              sleep 5
              if [ $i -eq 12 ]; then echo "Timeout waiting for $URL"; exit 1; fi
            done
          done
