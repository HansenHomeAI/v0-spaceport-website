name: Trigger ML Container Build

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main, development, ml-development ]
    # container-only workflow; no change
    paths:
      - 'infrastructure/containers/**'
      - 'scripts/deployment/deploy.sh'
      - 'buildspec.yml'

jobs:
  trigger-codebuild:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
    permissions:
      id-token: write   # for GitHub OIDC
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Need previous commit to detect changes

    - name: Detect changed containers
      id: changes
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Changed files: $CHANGED_FILES"
        
        # Check which containers have changes
        CONTAINERS_TO_BUILD=""
        
        if echo "$CHANGED_FILES" | grep -q "infrastructure/containers/sfm/"; then
          CONTAINERS_TO_BUILD="$CONTAINERS_TO_BUILD sfm"
          echo "SfM container changed"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "infrastructure/containers/3dgs/"; then
          CONTAINERS_TO_BUILD="$CONTAINERS_TO_BUILD 3dgs"
          echo "3DGS container changed"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "infrastructure/containers/compressor/"; then
          CONTAINERS_TO_BUILD="$CONTAINERS_TO_BUILD compressor"
          echo "Compressor container changed"
        fi
        
        # If deployment script or buildspec changed, build all
        if echo "$CHANGED_FILES" | grep -q -E "(scripts/deployment/deploy.sh|buildspec.yml)"; then
          CONTAINERS_TO_BUILD="all"
          echo "Build infrastructure changed - building all containers"
        fi
        
        # Default to all if no specific containers detected (safety)
        if [ -z "$CONTAINERS_TO_BUILD" ]; then
          CONTAINERS_TO_BUILD="all"
          echo "No specific container changes detected - building all for safety"
        fi
        
        echo "containers=$CONTAINERS_TO_BUILD" >> $GITHUB_OUTPUT
        echo "Will build: $CONTAINERS_TO_BUILD"

    - name: Configure AWS credentials (production via OIDC)
      if: github.ref_name == 'main'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2

    - name: Configure AWS credentials (staging via access keys)
      if: github.ref_name != 'main'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Create ECR repositories if they don't exist
      run: |
        for repo in spaceport/sfm spaceport/3dgs spaceport/compressor; do
          echo "Ensuring ECR repository exists: $repo"
          aws ecr describe-repositories --region us-west-2 --repository-names $repo || \
          aws ecr create-repository --region us-west-2 --repository-name $repo --image-scanning-configuration scanOnPush=true
        done

    - name: Ensure CodeBuild role and project exist (prod/staging)
      run: |
        ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
        echo "Using account: $ACCOUNT"

        # Ensure CodeBuild service role
        set +e
        aws iam get-role --role-name CodeBuildServiceRole >/dev/null 2>&1
        MISSING_ROLE=$?
        set -e
        if [ "$MISSING_ROLE" -ne 0 ]; then
          echo "Creating CodeBuildServiceRole..."
          # Write trust.json without heredoc to avoid delimiter parsing issues
          echo '{'            > trust.json
          echo '  "Version": "2012-10-17",' >> trust.json
          echo '  "Statement": ['            >> trust.json
          echo '    {'                         >> trust.json
          echo '      "Effect": "Allow",'   >> trust.json
          echo '      "Principal": {"Service": "codebuild.amazonaws.com"},' >> trust.json
          echo '      "Action": "sts:AssumeRole"' >> trust.json
          echo '    }'                         >> trust.json
          echo '  ]'                           >> trust.json
          echo '}'                             >> trust.json
          aws iam create-role --role-name CodeBuildServiceRole --assume-role-policy-document file://trust.json
          aws iam attach-role-policy --role-name CodeBuildServiceRole --policy-arn arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
          aws iam attach-role-policy --role-name CodeBuildServiceRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
          aws iam attach-role-policy --role-name CodeBuildServiceRole --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess
          aws iam attach-role-policy --role-name CodeBuildServiceRole --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        else
          echo "CodeBuildServiceRole already exists."
        fi

        ROLE_ARN=$(aws iam get-role --role-name CodeBuildServiceRole --query 'Role.Arn' --output text)
        echo "Service role: $ROLE_ARN"

        # Ensure CodeBuild project
        set +e
        aws codebuild batch-get-projects --names spaceport-ml-containers --query 'projects[0].name' --output text | grep -q spaceport-ml-containers
        MISSING_PROJ=$?
        set -e
        if [ "$MISSING_PROJ" -ne 0 ]; then
          echo "Creating CodeBuild project spaceport-ml-containers..."
          # Create project directly with role ARN instead of REPLACE_ME logic
          aws codebuild create-project \
            --name spaceport-ml-containers \
            --description "Build ML containers for Spaceport SOGS pipeline with PyTorch + CUDA" \
            --source type=GITHUB,location=https://github.com/HansenHomeAI/v0-spaceport-website.git,buildspec=buildspec.yml,gitCloneDepth=1,reportBuildStatus=true \
            --artifacts type=NO_ARTIFACTS \
            --environment type=LINUX_CONTAINER,image=aws/codebuild/standard:7.0,computeType=BUILD_GENERAL1_LARGE,privilegedMode=true \
            --service-role "$ROLE_ARN" \
            --timeout-in-minutes 120 \
            --queued-timeout-in-minutes 30 \
            --tags key=Project,value=Spaceport key=Purpose,value=ML-Container-Build
          echo "Created CodeBuild project."
        else
          echo "CodeBuild project already exists."
        fi

    - name: Trigger CodeBuild for container builds
      run: |
        echo "üöÄ Triggering AWS CodeBuild for ML container builds..."
        echo "Building containers: ${{ steps.changes.outputs.containers }}"
        
        BUILD_ID=$(aws codebuild start-build \
          --project-name spaceport-ml-containers \
          --source-version ${{ github.sha }} \
          --environment-variables-override name=CONTAINERS_TO_BUILD,value="${{ steps.changes.outputs.containers }}" \
          --query 'build.id' \
          --output text)
        
        echo "‚úÖ CodeBuild triggered successfully!"
        echo "Build ID: $BUILD_ID"
        echo "Monitor progress: https://console.aws.amazon.com/codesuite/codebuild/projects/spaceport-ml-containers/build/$BUILD_ID"
        
        # Wait for build to complete (optional - can be removed for async)
        echo "‚è≥ Waiting for CodeBuild to complete..."
        aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text
        
        # Poll for completion
        while true; do
          STATUS=$(aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text)
          echo "Build status: $STATUS"
          
          if [ "$STATUS" = "SUCCEEDED" ]; then
            echo "‚úÖ CodeBuild completed successfully!"
            break
          elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "FAULT" ] || [ "$STATUS" = "STOPPED" ] || [ "$STATUS" = "TIMED_OUT" ]; then
            echo "‚ùå CodeBuild failed with status: $STATUS"
            exit 1
          fi
          
          sleep 30
        done

    - name: Output container URIs
      run: |
        echo "‚úÖ ML Containers built and pushed via CodeBuild:"
        echo "Built containers: ${{ steps.changes.outputs.containers }}"
        echo "Account: $(aws sts get-caller-identity --query Account --output text)"
        echo "Region: us-west-2"