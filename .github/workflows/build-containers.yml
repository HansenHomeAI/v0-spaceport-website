name: Trigger ML Container Build

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/containers/**'
      - 'scripts/deployment/deploy.sh'
      - 'buildspec.yml'

jobs:
  trigger-codebuild:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2  # Need previous commit to detect changes

    - name: Detect changed containers
      id: changes
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Changed files: $CHANGED_FILES"
        
        # Check which containers have changes
        CONTAINERS_TO_BUILD=""
        GITHUB_BUILDABLE=""
        CODEBUILD_ONLY=""
        
        # SfM Container Analysis (potentially buildable on GitHub Actions)
        if echo "$CHANGED_FILES" | grep -q "infrastructure/containers/sfm/"; then
          CONTAINERS_TO_BUILD="$CONTAINERS_TO_BUILD sfm"
          GITHUB_BUILDABLE="$GITHUB_BUILDABLE sfm"
          echo "SfM container changed - candidate for GitHub Actions"
        fi
        
        # GPU Containers (always need CodeBuild)
        if echo "$CHANGED_FILES" | grep -q "infrastructure/containers/3dgs/"; then
          CONTAINERS_TO_BUILD="$CONTAINERS_TO_BUILD 3dgs"
          CODEBUILD_ONLY="$CODEBUILD_ONLY 3dgs"
          echo "3DGS container changed - requires CodeBuild (GPU dependencies)"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "infrastructure/containers/compressor/"; then
          CONTAINERS_TO_BUILD="$CONTAINERS_TO_BUILD compressor"
          CODEBUILD_ONLY="$CODEBUILD_ONLY compressor"
          echo "Compressor container changed - requires CodeBuild (GPU dependencies)"
        fi
        
        # If deployment script or buildspec changed, build all
        if echo "$CHANGED_FILES" | grep -q -E "(scripts/deployment/deploy.sh|buildspec.yml)"; then
          CONTAINERS_TO_BUILD="all"
          CODEBUILD_ONLY="all"
          echo "Build infrastructure changed - building all containers via CodeBuild"
        fi
        
        # Default to all if no specific containers detected (safety)
        if [ -z "$CONTAINERS_TO_BUILD" ]; then
          CONTAINERS_TO_BUILD="all"
          CODEBUILD_ONLY="all"
          echo "No specific container changes detected - building all for safety"
        fi
        
        echo "containers=$CONTAINERS_TO_BUILD" >> $GITHUB_OUTPUT
        echo "github_buildable=$GITHUB_BUILDABLE" >> $GITHUB_OUTPUT
        echo "codebuild_only=$CODEBUILD_ONLY" >> $GITHUB_OUTPUT
        echo "Will build: $CONTAINERS_TO_BUILD"
        echo "GitHub Actions candidates: $GITHUB_BUILDABLE"
        echo "CodeBuild required: $CODEBUILD_ONLY"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Create ECR repositories if they don't exist
      run: |
        for repo in spaceport/sfm spaceport/3dgs spaceport/compressor; do
          echo "Ensuring ECR repository exists: $repo"
          aws ecr describe-repositories --region us-west-2 --repository-names $repo || \
          aws ecr create-repository --region us-west-2 --repository-name $repo --image-scanning-configuration scanOnPush=true
        done

    - name: Try GitHub Actions build for lightweight containers
      id: github_build
      if: steps.changes.outputs.github_buildable != ''
      run: |
        echo "üß† Attempting intelligent build strategy..."
        echo "Containers that might build on GitHub Actions: ${{ steps.changes.outputs.github_buildable }}"
        
        # For now, we'll skip GitHub Actions build and use CodeBuild for reliability
        # This is a placeholder for future intelligent build logic
        echo "‚ö†Ô∏è  Skipping GitHub Actions build - using CodeBuild for reliability"
        echo "github_build_attempted=false" >> $GITHUB_OUTPUT
        echo "github_build_success=false" >> $GITHUB_OUTPUT

    - name: Trigger CodeBuild for container builds
      run: |
        echo "üöÄ Triggering AWS CodeBuild for ML container builds..."
        echo "Building containers: ${{ steps.changes.outputs.containers }}"
        echo "CodeBuild optimizations: Docker layer caching enabled"
        
        # Determine what to build based on intelligent analysis
        CONTAINERS_FOR_CODEBUILD="${{ steps.changes.outputs.containers }}"
        
        # If GitHub Actions build was successful, adjust what CodeBuild needs to build
        if [ "${{ steps.github_build.outputs.github_build_success }}" = "true" ]; then
          # Remove successfully built containers from CodeBuild queue
          echo "üì¶ Some containers built via GitHub Actions, optimizing CodeBuild workload"
          # This logic would be implemented when GitHub Actions builds are enabled
        fi
        
        echo "Final CodeBuild queue: $CONTAINERS_FOR_CODEBUILD"
        
        BUILD_ID=$(aws codebuild start-build \
          --project-name spaceport-ml-containers \
          --source-version ${{ github.sha }} \
          --environment-variables-override name=CONTAINERS_TO_BUILD,value="$CONTAINERS_FOR_CODEBUILD" \
          --query 'build.id' \
          --output text)
        
        echo "‚úÖ CodeBuild triggered successfully!"
        echo "Build ID: $BUILD_ID"
        echo "Monitor progress: https://console.aws.amazon.com/codesuite/codebuild/projects/spaceport-ml-containers/build/$BUILD_ID"
        echo "Build optimizations: Enhanced caching, intelligent workload distribution"
        
        # Wait for build to complete (optional - can be removed for async)
        echo "‚è≥ Waiting for CodeBuild to complete..."
        aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text
        
        # Poll for completion
        while true; do
          STATUS=$(aws codebuild batch-get-builds --ids $BUILD_ID --query 'builds[0].buildStatus' --output text)
          echo "Build status: $STATUS"
          
          if [ "$STATUS" = "SUCCEEDED" ]; then
            echo "‚úÖ CodeBuild completed successfully!"
            break
          elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "FAULT" ] || [ "$STATUS" = "STOPPED" ] || [ "$STATUS" = "TIMED_OUT" ]; then
            echo "‚ùå CodeBuild failed with status: $STATUS"
            exit 1
          fi
          
          sleep 30
        done

    - name: Output container URIs
      run: |
        echo "‚úÖ ML Containers built and pushed via CodeBuild:"
        echo "Built containers: ${{ steps.changes.outputs.containers }}"
        echo "SfM: 975050048887.dkr.ecr.us-west-2.amazonaws.com/spaceport/sfm:latest"
        echo "3DGS: 975050048887.dkr.ecr.us-west-2.amazonaws.com/spaceport/3dgs:latest"
        echo "Compressor: 975050048887.dkr.ecr.us-west-2.amazonaws.com/spaceport/compressor:latest" 