version: 0.2

env:
  variables:
    AWS_REGION: "us-west-2"
    CONTAINERS_TO_BUILD: "all"
    # Enable Docker BuildKit for better caching
    DOCKER_BUILDKIT: "1"
    BUILDKIT_PROGRESS: "plain"
    # Docker layer caching
    DOCKER_LAYER_CACHING: "1"

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing dependencies..."
      - pip install awscli --upgrade
      # Install Docker Buildx for advanced caching
      - docker buildx version || (curl -L https://github.com/docker/buildx/releases/download/v0.11.2/buildx-v0.11.2.linux-amd64 -o /usr/local/bin/docker-buildx && chmod +x /usr/local/bin/docker-buildx)
      - docker buildx create --name mybuilder --use || true
      - docker buildx inspect --bootstrap || true

  pre_build:
    commands:
      - echo "Resolving AWS account dynamically via STS..."
      - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - echo "Logging in to Docker Hub..."
      - echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - echo "Making deployment script executable..."
      - chmod +x scripts/deployment/deploy.sh
      - 'echo "Containers to build: $CONTAINERS_TO_BUILD"'
      # Pre-pull base images for caching
      - echo "Pre-pulling base images for caching..."
      - docker pull nvidia/cuda:11.8.0-devel-ubuntu22.04 || true
      - docker pull nvidia/cuda:12.9.1-runtime-ubuntu22.04 || true
      - docker pull python:3.9-slim || true
      # Set up Docker layer caching
      - echo "Setting up Docker layer caching..."
      - mkdir -p /tmp/docker-cache
      - export DOCKER_BUILDKIT=1

  build:
    commands:
      - echo "Starting optimized container build process..."
      - 'echo "Building with caching enabled: $CONTAINERS_TO_BUILD"'
      # Use optimized deployment script with caching
      - ./scripts/deployment/deploy.sh $CONTAINERS_TO_BUILD

  post_build:
    commands:
      - echo "Build process completed on `date`"
      - echo "Cleaning up build cache..."
      - docker system prune -f --volumes || true
      - docker buildx prune -f || true

artifacts:
  files:
    - '**/*'
  discard-paths: yes

cache:
  paths:
    # Python dependency caching
    - '/root/.cache/pip'
    - '/root/.cache/pipenv'
    - '/root/.local/share/virtualenvs'
    
    # Docker layer caching
    - '/root/.docker/buildx'
    - '/tmp/docker-cache/**/*'
    - '/var/lib/docker/image'
    - '/var/lib/docker/overlay2'
    
    # Build artifacts caching
    - 'infrastructure/containers/**/node_modules'
    - 'infrastructure/containers/**/.cache'
    - 'infrastructure/containers/**/build'
    - 'infrastructure/containers/**/dist'
    
    # AWS CLI and other tools
    - '/root/.aws'
    - '/usr/local/bin'
    
    # Git dependencies
    - '/root/.gitconfig'
    - '/tmp/git-cache' 