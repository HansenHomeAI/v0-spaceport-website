#!/usr/bin/env python3
"""
Local test script for SOGS compression
Tests the container functionality without SageMaker infrastructure
"""

import os
import sys
import tempfile
import shutil
from pathlib import Path
import subprocess
import json

def create_test_ply_file(output_path: Path) -> None:
    """Create a minimal test PLY file for testing"""
    print(f"Creating test PLY file: {output_path}")
    
    ply_content = """ply
format ascii 1.0
comment Generated by test script
element vertex 1000
property float x
property float y
property float z
property float nx
property float ny
property float nz
property uchar red
property uchar green
property uchar blue
property float opacity
property float scale_0
property float scale_1
property float scale_2
property float rot_0
property float rot_1
property float rot_2
property float rot_3
end_header
"""
    
    with open(output_path, 'w') as f:
        f.write(ply_content)
        # Add some sample vertices
        for i in range(1000):
            x, y, z = i * 0.001, i * 0.001, i * 0.001
            # Normal vector
            nx, ny, nz = 0.0, 0.0, 1.0
            # RGB color
            r, g, b = min(255, i % 256), min(255, (i * 2) % 256), min(255, (i * 3) % 256)
            # Opacity
            opacity = 0.8
            # Scale
            scale_0, scale_1, scale_2 = 0.1, 0.1, 0.1
            # Rotation quaternion (identity)
            rot_0, rot_1, rot_2, rot_3 = 1.0, 0.0, 0.0, 0.0
            
            f.write(f"{x:.6f} {y:.6f} {z:.6f} {nx:.6f} {ny:.6f} {nz:.6f} {r} {g} {b} {opacity:.6f} {scale_0:.6f} {scale_1:.6f} {scale_2:.6f} {rot_0:.6f} {rot_1:.6f} {rot_2:.6f} {rot_3:.6f}\n")
    
    print(f"Test PLY file created: {output_path.stat().st_size / 1024:.1f} KB")

def test_sogs_compression_local():
    """Test SOGS compression locally"""
    print("üß™ Testing SOGS compression locally...")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # Create test directories
        input_dir = temp_path / "input"
        output_dir = temp_path / "output"
        input_dir.mkdir(exist_ok=True)
        output_dir.mkdir(exist_ok=True)
        
        # Create test PLY file
        test_ply = input_dir / "test_model.ply"
        create_test_ply_file(test_ply)
        
        # Set environment variables
        env = os.environ.copy()
        env.update({
            'SM_CHANNEL_INPUT': str(input_dir),
            'SM_OUTPUT_DATA_DIR': str(output_dir),
            'SM_CURRENT_HOST': 'local-test-host'
        })
        
        # Run the compression script
        script_path = Path(__file__).parent / "compress_model.py"
        
        print(f"Running compression script: {script_path}")
        print(f"Input directory: {input_dir}")
        print(f"Output directory: {output_dir}")
        
        try:
            result = subprocess.run(
                [sys.executable, str(script_path)],
                env=env,
                capture_output=True,
                text=True,
                timeout=300  # 5 minute timeout for local testing
            )
            
            print(f"Return code: {result.returncode}")
            print(f"STDOUT:\n{result.stdout}")
            if result.stderr:
                print(f"STDERR:\n{result.stderr}")
            
            # Check outputs
            if output_dir.exists():
                output_files = list(output_dir.rglob("*"))
                print(f"\nüìÅ Output files ({len(output_files)} total):")
                for f in output_files:
                    if f.is_file():
                        size_kb = f.stat().st_size / 1024
                        print(f"  - {f.relative_to(output_dir)} ({size_kb:.1f} KB)")
                        
                        # Show report content if it exists
                        if f.name == "compression_report.json":
                            try:
                                with open(f, 'r') as rf:
                                    report = json.load(rf)
                                print(f"\nüìä Compression Report:")
                                print(f"  - Job: {report.get('job_name', 'unknown')}")
                                print(f"  - Algorithm: {report.get('compression_algorithm', 'unknown')}")
                                print(f"  - Input Size: {report.get('input_size_mb', 0):.2f} MB")
                                print(f"  - Output Size: {report.get('output_size_mb', 0):.2f} MB")
                                print(f"  - Compression Ratio: {report.get('compression_ratio', 'unknown')}")
                                print(f"  - Processing Time: {report.get('processing_time_minutes', 0):.2f} minutes")
                            except Exception as e:
                                print(f"  - Could not read report: {e}")
            
            return result.returncode == 0
            
        except subprocess.TimeoutExpired:
            print("‚è∞ Test timed out after 5 minutes")
            return False
        except Exception as e:
            print(f"‚ùå Test failed with error: {e}")
            return False

def test_docker_build():
    """Test Docker container build"""
    print("üê≥ Testing Docker container build...")
    
    container_dir = Path(__file__).parent
    
    # Try building minimal version first
    try:
        print("Building minimal container...")
        result = subprocess.run([
            'docker', 'build', 
            '-f', 'Dockerfile.minimal',
            '-t', 'sogs-compressor:minimal',
            str(container_dir)
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Minimal container built successfully")
            return True
        else:
            print(f"‚ùå Container build failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Docker build error: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ SOGS Compression Container Tests")
    print("=" * 40)
    
    # Test 1: Local script execution
    print("\n1Ô∏è‚É£ Testing local script execution...")
    script_success = test_sogs_compression_local()
    
    # Test 2: Docker build
    print("\n2Ô∏è‚É£ Testing Docker container build...")
    docker_success = test_docker_build()
    
    # Summary
    print("\nüìã Test Summary:")
    print(f"  - Local script: {'‚úÖ PASS' if script_success else '‚ùå FAIL'}")
    print(f"  - Docker build: {'‚úÖ PASS' if docker_success else '‚ùå FAIL'}")
    
    if script_success and docker_success:
        print("\nüéâ All tests passed! Container is ready for deployment.")
        return 0
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Please review the output above.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 