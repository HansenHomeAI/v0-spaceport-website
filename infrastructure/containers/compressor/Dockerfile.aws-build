# AWS CodeBuild Dockerfile for SOGS Compression Container
# This builds on AWS infrastructure with proper CUDA support
FROM nvidia/cuda:12.6-runtime-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_VISIBLE_DEVICES=0

# Set working directory
WORKDIR /opt/ml

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    git \
    wget \
    curl \
    build-essential \
    cmake \
    pkg-config \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic links for python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Upgrade pip
RUN python -m pip install --upgrade pip

# Install PyTorch with CUDA 12.6 support
RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126

# Install CuPy for CUDA 12.x
RUN pip install cupy-cuda12x

# Install other ML dependencies
RUN pip install torchpq

# Install PLAS (Parallel Linear Assignment Sorting)
RUN pip install git+https://github.com/fraunhoferhhi/PLAS.git

# Copy and install requirements
COPY requirements.txt .
RUN pip install -r requirements.txt

# Clone and install SOGS
RUN git clone https://github.com/playcanvas/sogs.git /tmp/sogs
WORKDIR /tmp/sogs
RUN pip install -e .

# Return to working directory
WORKDIR /opt/ml

# Copy compression script
COPY compress_model.py .
RUN chmod +x compress_model.py

# Set entrypoint
ENTRYPOINT ["python", "/opt/ml/compress_model.py"] 